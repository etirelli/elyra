#
# Copyright 2018-2023 Elyra Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Elyra Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the release'
        required: true
      branch:
        description: 'Branch to release from'
        required: true

jobs:
  build:
    uses: ./.github/workflows/build.yml

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create release branch
        run: |
          git checkout -b rel-${{ github.event.inputs.version }} ${{ github.event.inputs.branch }}
          git push -u origin rel-${{ github.event.inputs.version }}

      - name: Update version file
        run: |
          # edits the version file in place
          sed -i '' 's/^__version__ = ".*"/__version__ = "${{ github.event.inputs.version }}"/' elyra/_version.py
          git config user.name "Edson Tirelli"
          git config user.email ed.tirelli@github.com
          git commit -m "Bump version to ${{ github.event.inputs.version }}" elyra/_version.py
          git push

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Build package
        run: make install

#      - name: Release to PyPI
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#        run: |
#          twine upload dist/*

      - name: Create tag
        if: success()
        run: |
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

#      - name: Create GitHub Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ github.event.inputs.version }}
#          release_name: Release ${{ github.event.inputs.version }}
#          body: |
#            Release version ${{ github.event.inputs.version }}
#          draft: false
#          prerelease: false

